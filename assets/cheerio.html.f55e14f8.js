import{_ as e,r as p,o,c,a as s,b as n,d as l,e as a}from"./app.678d7e92.js";const i={},u=a(`<p><code>cheerio</code>\u662F<code>jquery</code>\u6838\u5FC3\u529F\u80FD\u5728\u670D\u52A1\u5668\u7AEF\u7684\u4E00\u4E2A\u5B9E\u73B0\u3002\u9996\u5148\u9700\u8981\u6CE8\u610F\u7684\u4E00\u70B9\u662F\uFF0C<code>cheerio</code>\u5BF9\u683C\u5F0F\u662F\u975E\u5E38\u4E25\u8C28\u654F\u611F\u7684\uFF0C\u4E5F\u5C31\u662F\u5982\u679C\u4F20\u8FDB\u53BB\u7684<code>html</code>\u6807\u7B7E\u4E0D\u89C4\u8303\uFF0C\u5F88\u6709\u53EF\u80FD\u5F97\u4E0D\u5230\u6B63\u786E\u7684\u7ED3\u679C\uFF01\uFF01\uFF01\uFF01\uFF01</p><h1 id="\u57FA\u7840\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#\u57FA\u7840\u77E5\u8BC6" aria-hidden="true">#</a> \u57FA\u7840\u77E5\u8BC6</h1><h2 id="\u5B89\u88C5" tabindex="-1"><a class="header-anchor" href="#\u5B89\u88C5" aria-hidden="true">#</a> \u5B89\u88C5</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> cheerio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u7B80\u5355\u7684\u5165\u95E8" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u7684\u5165\u95E8" aria-hidden="true">#</a> \u7B80\u5355\u7684\u5165\u95E8</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h2 class=&quot;title&quot;&gt;First&lt;/h2&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;h2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//First</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//First</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4ECE\u8FD9\u4E2A\u4F8B\u5B50\u6211\u4EEC\u53EF\u4EE5\u770B\u51FA\u57FA\u672C\u7684\u6D41\u7A0B\uFF0C\u5148\u7528require\u5F15\u5165\u4F9D\u8D56\uFF0C\u7136\u540E\u4F7F\u7528<code>cheerio</code>\u7684<code>load</code>\u65B9\u6CD5\u52A0\u8F7D\u6211\u4EEC\u7684HTML\u6587\u6863\u3002</p><blockquote><p>\u52A0\u8F7DHtml\uFF0C\u5728\u4F7F\u7528<code>jQuery</code>\u65F6\u90FD\u662F<code>jQuery</code>\u81EA\u52A8\u5B8C\u6210\u7684\uFF0C\u8FD9\u4E00\u70B9\u548C<code>cheerio</code>\u4E0D\u540C\u3002</p></blockquote><p>\u5B9E\u9645\u4E0A\uFF0C\u5728load\u88C5\u8F7D\u7684\u65F6\u5019\u8FD8\u53EF\u4EE5\u4F20\u5165\u53C2\u6570\uFF0C\u6BD4\u5982\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p class=&quot;red&quot; id=&quot;id1&quot;&gt;   One     Two Three&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">xml</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">normalizeWhitespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// One Two Three</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>normalizeWhitespace</code>\u4F1A\u5C06\u6587\u6863\u7684\u591A\u4F59\u7A7A\u683C\u5220\u9664\uFF0C\u6700\u540E\u53EA\u4FDD\u7559\u4E00\u4E2A\u7A7A\u683C\u3002</p><h2 id="\u9009\u62E9\u5668-selectors" tabindex="-1"><a class="header-anchor" href="#\u9009\u62E9\u5668-selectors" aria-hidden="true">#</a> \u9009\u62E9\u5668\uFF08selectors\uFF09</h2><p><code>cheerio</code>\u7684\u9009\u62E9\u5668\u51E0\u4E4E\u548C<code>jQuery</code>\u4E00\u6A21\u4E00\u6837\uFF0C\u6240\u4EE5\u8BED\u6CD5\u4E0A\u5341\u5206\u76F8\u50CF\u3002\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token punctuation">[</span>context<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>selector</code>\u5728<code>context</code>\u7684\u8303\u56F4\u5185\u641C\u7D22\uFF0C<code>context</code>\u7684\u8303\u56F4\u53C8\u5305\u542B\u5728<code>root</code>\u7684\u8303\u56F4\u5185\u3002<code>selector</code>\u548C<code>context</code>\u53EF\u4EE5\u662F\u4E00\u4E2A<code>\u5B57\u7B26\u4E32</code>\uFF0C<code>DOM\u5143\u7D20</code>\uFF0C<code>DOM\u6570\u7EC4</code>\u6216\u8005<code>cheerio\u5B9E\u4F8B</code>\u3002<code>root</code>\u4E00\u822C\u662F\u4E00\u4E2A<code>HTML\u6587\u6863\u5B57\u7B26\u4E32</code>\u3002</p><h2 id="\u5B9E\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u4F8B" aria-hidden="true">#</a> \u5B9E\u4F8B</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;p class=&quot;red&quot; id=&quot;id1&quot;&gt;First&lt;br&gt;&lt;/p&gt;
&lt;p data=&quot;fuck&quot; id=&quot;id2&quot;&gt;Second&lt;/p&gt;
&lt;p&gt;Three&lt;/p&gt;
&lt;em class=&quot;red&quot;&gt;Four&lt;/em&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#id1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//First</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//FirstFour</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p.red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//First</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p[class=red]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//First&lt;br&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#id2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//fuck</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E2A\u5B9E\u4F8B\u6211\u4EEC\u901A\u8FC7ID\uFF0C\u901A\u8FC7Class\u505A\u9009\u62E9\u5668\u3002\u540E\u9762\u53C8\u4F7F\u7528\u4E86<code>html</code>\u548C<code>attr</code>\u65B9\u6CD5\u3002\u8FD9\u4E9B\u90FD\u662F\u5F88\u5B9E\u7528\u7684\u3002</p><h1 id="\u5C5E\u6027" tabindex="-1"><a class="header-anchor" href="#\u5C5E\u6027" aria-hidden="true">#</a> \u5C5E\u6027</h1><p>\u4E0A\u9762\u5C0F\u8BD5\u725B\u5200\u540E\uFF0C\u6211\u4EEC\u4E0B\u9762\u8BE6\u7EC6\u4ECB\u7ECD<code>cheerio</code>\u8BFB\u53D6\u548C\u4FEE\u6539\u5C5E\u6027\u7684\u65B9\u6CD5\u3002</p><h2 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> .html()</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p class=&quot;red&quot; id=&quot;id1&quot;&gt;One&lt;em&gt;HaHa&lt;/em&gt;&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//One&lt;em&gt;HaHa&lt;/em&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;p class=&quot;red&quot; id=&quot;id1&quot;&gt;One&lt;em&gt;HaHa&lt;/em&gt;&lt;/p&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u901A\u8FC7html\u65B9\u6CD5\u53EF\u4EE5\u83B7\u53D6\u9009\u62E9\u5668\u4E2D\u7684\u5168\u90E8\u6587\u672C\uFF0C\u5982\u679C\u8981\u83B7\u53D6\u6574\u4E2A\u6587\u672C\uFF0C\u53EF\u4EE5\u91C7\u7528 <code>$.html(selector)</code>\u3002</p><h2 id="attr-name-value" tabindex="-1"><a class="header-anchor" href="#attr-name-value" aria-hidden="true">#</a> .attr( name, value )</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p id=&quot;id1&quot;&gt;One&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//id1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;p id=&quot;id1&quot;&gt;One&lt;/p&gt;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fuck&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;p id=&quot;fuck&quot;&gt;One&lt;/p&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>attr</code>\u65B9\u6CD5\u5F88\u597D\u7406\u89E3\uFF0C\u5982\u679C\u53EA\u6709\u4E00\u4E2A\u53C2\u6570\uFF0C\u90A3\u5C31\u662F\u8BFB\u53D6\u5C5E\u6027\uFF0C\u5982\u679C\u6709\u4E24\u4E2A\uFF0C\u90A3\u5C31\u662F\u8BBE\u7F6E\u5C5E\u6027\u3002</p><blockquote><p>See http://api.jquery.com/attr/ for more information</p></blockquote><h2 id="prop-name-value" tabindex="-1"><a class="header-anchor" href="#prop-name-value" aria-hidden="true">#</a> .prop( name, value )</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;input id=&quot;chk1&quot; type=&quot;checkbox&quot; /&gt;\u662F\u5426\u53EF\u89C1
&lt;input id=&quot;chk2&quot; type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;\u662F\u5426\u53EF\u89C1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#chk1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#chk2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//checked</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#chk1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#chk2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>prop</code>\u548C<code>attr</code>\uFF0C\u4E24\u8005\u975E\u5E38\u76F8\u4F3C\uFF0C\u90A3\u4E48\u5982\u4F55\u4F7F\u7528\uFF0C\u533A\u522B\u5728\u54EA\u91CC\uFF1F\u5728\u5BF9\u5F85\u50CF<code>checkbox</code>\uFF0C<code>radio</code>\u548C<code>select</code>\u8FD9\u6837\u7684\u5143\u7D20\uFF0C\u9009\u4E2D\u5C5E\u6027\u5BF9\u5E94<code>checked</code>\u548C<code>selected</code>\uFF0C\u9700\u8981\u4F7F\u7528<code>prop</code>\u65B9\u6CD5\u53BB\u64CD\u4F5C\u624D\u80FD\u83B7\u5F97\u6B63\u786E\u7684\u7ED3\u679C\u3002\u5176\u4ED6\u7684\u60C5\u51B5\u4E24\u8005\u57FA\u672C\u6CA1\u6709\u5DEE\u522B\u3002</p><blockquote><p>See http://api.jquery.com/prop/ for more information</p></blockquote><h2 id="data-name-value" tabindex="-1"><a class="header-anchor" href="#data-name-value" aria-hidden="true">#</a> .data( name, value )</h2><p>Method for getting and setting data attributes. Gets or sets the data attribute value for only the first element in the matched set.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div data-apple-color=&quot;red&quot; data-orange-color=&quot;blue&quot;&gt;&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { appleColor: &#39;red&#39;, orangeColor: &#39;blue&#39; }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>appleColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;apple-color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;data-apple-color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>data</code>\u65B9\u6CD5\u7528\u4E8E\u83B7\u53D6<code>data</code>\u5C5E\u6027\uFF0C\u7B97\u662F\u4E00\u4E2A<code>\u5FEB\u6377\u65B9\u5F0F</code>\uFF0C\u6CE8\u610F\u4F8B\u5B50\u4E2D\u7684\u6700\u540E\u4E00\u884C\uFF0C\u5B9E\u9645\u4E0A\u7528<code>attr</code>\u65B9\u6CD5\u4E5F\u662F\u53EF\u4EE5\u8BFB\u53D6\u5230<code>data</code>\u5C5E\u6027\u7684\u3002</p><blockquote><p>See http://api.jquery.com/data/ for more information</p></blockquote><h2 id="val-value" tabindex="-1"><a class="header-anchor" href="#val-value" aria-hidden="true">#</a> .val( [value] )</h2><p>Method for getting and setting the value of input, select, and textarea. Note: Support for <code>map</code>, and <code>function</code> has not been added yet.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;text&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; input_text</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;text&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;input type=&quot;text&quot; value=&quot;test&quot;/&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="\u8FDB\u9636" tabindex="-1"><a class="header-anchor" href="#\u8FDB\u9636" aria-hidden="true">#</a> \u8FDB\u9636</h1><h2 id="parent-selector" tabindex="-1"><a class="header-anchor" href="#parent-selector" aria-hidden="true">#</a> .parent([selector])</h2><p>\u83B7\u53D6\u5F53\u524D\u9009\u62E9\u5668\u7684\u7236\u7EA7\u5BF9\u8C61\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;p class=&quot;red&quot; id=&quot;id1&quot;&gt;
  First&lt;br /&gt;

  &lt;p data=&quot;fuck&quot; id=&quot;id2&quot;&gt;    
    &lt;b&gt;Big&lt;/b&gt;
    Second
    &lt;em class=&quot;green&quot;&gt;Green&lt;/em&gt;
  &lt;/p&gt;

  Three  
&lt;/p&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Green</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Big Second Green</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Big</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4ECE\u8FD9\u4E2A\u5B9E\u4F8B\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5F88\u6E05\u695A\u7684\u770B\u51FA<code>parent</code>\u7684\u4F5C\u7528\u3002\u9700\u8981\u6CE8\u610F\u7684\u662F<code>prev</code>\uFF0C<code>Second</code>\u53EA\u662F\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u5E76\u4E0D\u662F\u4E00\u4E2A\u5143\u7D20\uFF0C\u6240\u4EE5<code>.green</code>\u7684<code>prev</code>\u662F<code>Big</code>\u3002</p><h2 id="prev-selector" tabindex="-1"><a class="header-anchor" href="#prev-selector" aria-hidden="true">#</a> .prev([selector])</h2><p>Gets the previous sibling of the first selected element optionally filtered by a selector.</p><p>\u5B9E\u4F8B\uFF08\u7565\uFF09</p><h2 id="next-selector" tabindex="-1"><a class="header-anchor" href="#next-selector" aria-hidden="true">#</a> .next([selector])</h2><p>Gets the next sibling of the first selected element, optionally filtered by a selector.</p><p>\u5B9E\u4F8B\uFF08\u7565\uFF09</p><h2 id="contains-container-contained" tabindex="-1"><a class="header-anchor" href="#contains-container-contained" aria-hidden="true">#</a> $.contains(container, contained)</h2><p>\u6709\u4E00\u79CD\u60C5\u51B5\u5F88\u5E38\u89C1\uFF0C\u6211\u4EEC\u9700\u8981\u540C\u65F6\u6839\u636E\u6807\u7B7E\u548C\u5B83\u7684\u5185\u5BB9\u8FDB\u884C\u9009\u62E9\u3002\u8FD9\u4E2A\u65F6\u5019\u4E0D\u80FD\u60F3\u5F53\u7136\uFF01\uFF01\uFF01</p><h3 id="\u9519\u8BEF\u5B9E\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u9519\u8BEF\u5B9E\u4F8B" aria-hidden="true">#</a> \u9519\u8BEF\u5B9E\u4F8B</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr align=&quot;left&quot;&gt;
      &lt;td class=&quot;text&quot;&gt;&lt;strong&gt;\u4F5C\u8005&lt;/strong&gt;
      \u963F\u4E1C
      &lt;/td&gt;
      &lt;td class=&quot;small&quot;&gt;&lt;strong&gt;\u5185\u5BB9\u7B80\u4ECB&lt;/strong&gt;
      \u56E0\u4E3A\u4E00\u573A\u8BEF\u4F1A\u5BFC\u81F4\u4E24\u4EBA\u611F\u60C5\u7834\u88C2 ...
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> jianjie <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;strong&gt;\u5185\u5BB9\u7B80\u4ECB&lt;/strong&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jianjie<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token keyword">let</span> parent <span class="token operator">=</span> jianjie<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7A7A\u767D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6B63\u786E\u5B9E\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u6B63\u786E\u5B9E\u4F8B" aria-hidden="true">#</a> \u6B63\u786E\u5B9E\u4F8B</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr align=&quot;left&quot;&gt;
      &lt;td class=&quot;text&quot;&gt;&lt;strong&gt;\u4F5C\u8005&lt;/strong&gt;
      \u963F\u4E1C
      &lt;/td&gt;
      &lt;td class=&quot;small&quot;&gt;&lt;strong&gt;\u5185\u5BB9\u7B80\u4ECB&lt;/strong&gt;
      \u56E0\u4E3A\u4E00\u573A\u8BEF\u4F1A\u5BFC\u81F4\u4E24\u4EBA\u611F\u60C5\u7834\u88C2 ...
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> jianjie <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;strong:contains(&#39;\u5185\u5BB9\u7B80\u4ECB&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jianjie<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  1</span>
<span class="token keyword">let</span> parent <span class="token operator">=</span> jianjie<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u5185\u5BB9\u7B80\u4ECB \u56E0\u4E3A\u4E00\u573A\u8BEF\u4F1A\u5BFC\u81F4\u4E24\u4EBA\u611F\u60C5\u7834\u88C2 ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E3A\u4EC0\u4E48\u9519\u8BEF\u5B9E\u4F8B\u4E2D\uFF0C<code>jianjie</code>\u663E\u793A<code>1</code>\u8BF4\u660E\u5DF2\u7ECF\u83B7\u53D6\u5230\u5143\u7D20\uFF0C\u4F46\u662F\u540E\u9762\u7528<code>parent</code>\u5374\u6CA1\u6709\u5F97\u5230\u76F8\u5E94\u7684\u7ED3\u679C\uFF1F\u56E0\u4E3A\u4F60\u5728<code>$(&quot;&lt;strong&gt;\u5185\u5BB9\u7B80\u4ECB&lt;/strong&gt;&quot;)</code>\u8FD9\u4E2A\u64CD\u4F5C\u4E2D\uFF0C\u5DF2\u7ECF\u66FF\u6362\u6389\u4E86\u539F\u59CB\u7684\u5143\u7D20\uFF0C\u6574\u4E2A\u8303\u56F4\u90FD\u88AB\u7F29\u5C0F\u5230<code>strong</code>\u6765\u4E86\uFF0C\u6240\u4EE5\u67E5\u627E\u4E0D\u5230\u6B63\u786E\u7ED3\u679C\u3002</p><h2 id="remove-selector" tabindex="-1"><a class="header-anchor" href="#remove-selector" aria-hidden="true">#</a> .remove( [selector] )</h2><p>Removes the set of matched elements from the DOM and all their children. <code>selector</code> filters the set of matched elements to be removed.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr align=&quot;left&quot;&gt;
      &lt;td class=&quot;text&quot;&gt;&lt;strong&gt;\u4F5C\u8005&lt;/strong&gt;
      \u963F\u4E1C
      &lt;/td&gt;
      &lt;td class=&quot;small&quot;&gt;&lt;strong&gt;\u5185\u5BB9\u7B80\u4ECB&lt;/strong&gt;
      \u56E0\u4E3A\u4E00\u573A\u8BEF\u4F1A\u5BFC\u81F4\u4E24\u4EBA\u611F\u60C5\u7834\u88C2 ...
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> small <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.small&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>small<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5185\u5BB9\u7B80\u4ECB  \u56E0\u4E3A\u4E00\u573A\u8BEF\u4F1A\u5BFC\u81F4\u4E24\u4EBA\u611F\u60C5\u7834\u88C2 ...</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;strong&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>small<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u56E0\u4E3A\u4E00\u573A\u8BEF\u4F1A\u5BFC\u81F4\u4E24\u4EBA\u611F\u60C5\u7834\u88C2 ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parents-selector" tabindex="-1"><a class="header-anchor" href="#parents-selector" aria-hidden="true">#</a> .parents([selector])</h2><p>Get a set of parents filtered by <code>selector</code> of each element in the current set of match elements.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">// =&gt; 2</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">// =&gt; 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="removeattr-name" tabindex="-1"><a class="header-anchor" href="#removeattr-name" aria-hidden="true">#</a> .removeAttr( name )</h4><p>Method for removing attributes by <code>name</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li&gt;Pear&lt;/li&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hasclass-classname" tabindex="-1"><a class="header-anchor" href="#hasclass-classname" aria-hidden="true">#</a> .hasClass( className )</h4><p>Check to see if <em>any</em> of the matched elements have the given <code>className</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">&quot;pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; true</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">&quot;fruit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; false</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">&quot;pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="addclass-classname" tabindex="-1"><a class="header-anchor" href="#addclass-classname" aria-hidden="true">#</a> .addClass( className )</h4><p>Adds class(es) to all of the matched elements. Also accepts a <code>function</code> like jQuery.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;fruit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li class=&quot;pear fruit&quot;&gt;Pear&lt;/li&gt;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;fruit red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li class=&quot;apple fruit red&quot;&gt;Apple&lt;/li&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>See http://api.jquery.com/addClass/ for more information.</p></blockquote><h4 id="removeclass-classname" tabindex="-1"><a class="header-anchor" href="#removeclass-classname" aria-hidden="true">#</a> .removeClass( [className] )</h4><p>Removes one or more space-separated classes from the selected elements. If no <code>className</code> is defined, all classes will be removed. Also accepts a <code>function</code> like jQuery.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">&quot;pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li class=&quot;&quot;&gt;Pear&lt;/li&gt;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li class=&quot;&quot;&gt;Apple&lt;/li&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>See http://api.jquery.com/removeClass/ for more information.</p></blockquote><h4 id="toggleclass-classname-switch" tabindex="-1"><a class="header-anchor" href="#toggleclass-classname-switch" aria-hidden="true">#</a> .toggleClass( className, [switch] )</h4><p>Add or remove class(es) from the matched elements, depending on either the class&#39;s presence or the value of the switch argument. Also accepts a <code>function</code> like jQuery.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple.green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">&quot;fruit green red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li class=&quot;apple fruit red&quot;&gt;Apple&lt;/li&gt;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple.green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">&quot;fruit green red&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li class=&quot;apple green fruit red&quot;&gt;Apple&lt;/li&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>See http://api.jquery.com/toggleClass/ for more information.</p></blockquote><h4 id="is-selector" tabindex="-1"><a class="header-anchor" href="#is-selector" aria-hidden="true">#</a> .is( selector )</h4><h4 id="is-element" tabindex="-1"><a class="header-anchor" href="#is-element" aria-hidden="true">#</a> .is( element )</h4><h4 id="is-selection" tabindex="-1"><a class="header-anchor" href="#is-selection" aria-hidden="true">#</a> .is( selection )</h4><h4 id="is-function-index" tabindex="-1"><a class="header-anchor" href="#is-function-index" aria-hidden="true">#</a> .is( function(index) )</h4><p>Checks the current list of elements and returns <code>true</code> if <em>any</em> of the elements match the selector. If using an element or Cheerio selection, returns <code>true</code> if <em>any</em> of the elements match. If using a predicate function, the function is executed in the context of the selected element, so <code>this</code> refers to the current element.</p><h3 id="forms" tabindex="-1"><a class="header-anchor" href="#forms" aria-hidden="true">#</a> Forms</h3><h4 id="serializearray" tabindex="-1"><a class="header-anchor" href="#serializearray" aria-hidden="true">#</a> .serializeArray()</h4><p>Encode a set of form elements as an array of names and values.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;form&gt;&lt;input name=&quot;foo&quot; value=&quot;bar&quot; /&gt;&lt;/form&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serializeArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [ { name: &#39;foo&#39;, value: &#39;bar&#39; } ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="traversing" tabindex="-1"><a class="header-anchor" href="#traversing" aria-hidden="true">#</a> Traversing</h3><h4 id="find-selector" tabindex="-1"><a class="header-anchor" href="#find-selector" aria-hidden="true">#</a> .find(selector)</h4><h4 id="find-selection" tabindex="-1"><a class="header-anchor" href="#find-selection" aria-hidden="true">#</a> .find(selection)</h4><h4 id="find-node" tabindex="-1"><a class="header-anchor" href="#find-node" aria-hidden="true">#</a> .find(node)</h4><p>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 3</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parentsuntil-selector-filter" tabindex="-1"><a class="header-anchor" href="#parentsuntil-selector-filter" aria-hidden="true">#</a> .parentsUntil([selector][,filter])</h4><p>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or cheerio object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parentsUntil</span><span class="token punctuation">(</span><span class="token string">&quot;#food&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">// =&gt; 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="closest-selector" tabindex="-1"><a class="header-anchor" href="#closest-selector" aria-hidden="true">#</a> .closest(selector)</h4><p>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; []</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; []</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; [&lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;]</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; [&lt;ul id=&quot;fruits&quot;&gt; ... &lt;/ul&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nextall-selector" tabindex="-1"><a class="header-anchor" href="#nextall-selector" aria-hidden="true">#</a> .nextAll([selector])</h4><p>Gets all the following siblings of the first selected element, optionally filtered by a selector.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [&lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;, &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;]</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [&lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nextuntil-selector-filter" tabindex="-1"><a class="header-anchor" href="#nextuntil-selector-filter" aria-hidden="true">#</a> .nextUntil([selector], [filter])</h4><p>Gets all the following siblings up to but not including the element matched by the selector, optionally filtered by another selector.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextUntil</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [&lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E8E<code>nextAll</code>\u8FD9\u4E9B\u9009\u53D6\u51FA\u6765\u7684\u5143\u7D20\uFF0C\u8981\u60F3\u83B7\u53D6\u5B83\u4EEC\u7684\u5185\u5BB9\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528<code>map</code>\u51FD\u6570\u3002</p><h4 id="prevall-selector" tabindex="-1"><a class="header-anchor" href="#prevall-selector" aria-hidden="true">#</a> .prevAll([selector])</h4><p>Gets all the preceding siblings of the first selected element, optionally filtered by a selector.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prevAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [&lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;, &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;]</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prevAll</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [&lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prevuntil-selector-filter" tabindex="-1"><a class="header-anchor" href="#prevuntil-selector-filter" aria-hidden="true">#</a> .prevUntil([selector], [filter])</h4><p>Gets all the preceding siblings up to but not including the element matched by the selector, optionally filtered by another selector.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prevUntil</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [&lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="slice-start-end" tabindex="-1"><a class="header-anchor" href="#slice-start-end" aria-hidden="true">#</a> .slice( start, [end] )</h4><p>Gets the elements matching the specified range</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &#39;Orange&#39;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="siblings-selector" tabindex="-1"><a class="header-anchor" href="#siblings-selector" aria-hidden="true">#</a> .siblings([selector])</h4><p>Gets the first selected element&#39;s siblings, excluding itself.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 2</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="children-selector" tabindex="-1"><a class="header-anchor" href="#children-selector" aria-hidden="true">#</a> .children([selector])</h4><p>Gets the children of the first selected element.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 3</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; Pear</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="contents" tabindex="-1"><a class="header-anchor" href="#contents" aria-hidden="true">#</a> .contents()</h4><p>Gets the children of each element in the set of matched elements, including text and comment nodes.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="each-function-index-element" tabindex="-1"><a class="header-anchor" href="#each-function-index-element" aria-hidden="true">#</a> .each( function(index, element) )</h4><p>Iterates over a cheerio object, executing a function for each matched element. When the callback is fired, the function is fired in the context of the DOM element, so <code>this</code> refers to the current element, which is equivalent to the function parameter <code>element</code>. To break out of the <code>each</code> loop early, return with <code>false</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> elem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fruits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; Apple, Orange, Pear</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="map-function-index-element" tabindex="-1"><a class="header-anchor" href="#map-function-index-element" aria-hidden="true">#</a> .map( function(index, element) )</h4><p>\u901A\u8FC7\u51FD\u6570\u4F20\u9012\u5F53\u524D\u5339\u914D\u96C6\u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20, \u751F\u6210\u5305\u542B\u8FD4\u56DE\u503C\u7684\u65B0 cheerio \u5BF9\u8C61\u3002(\u548Cjquery\u7C7B\u4F3C\u7684each\u8FED\u4EE3\u5668\uFF0C\u5BF9\u6BCF\u4E00\u4E2A\u5143\u7D20\u8FDB\u884C\u5904\u7406\u5E76\u8FD4\u56DE\u4E00\u4E2A\u503C\u3002)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// this === el</span>
  <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &quot;apple orange pear&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="filter-selector-filter-selection-filter-element-filter-function-index-element" tabindex="-1"><a class="header-anchor" href="#filter-selector-filter-selection-filter-element-filter-function-index-element" aria-hidden="true">#</a> .filter( selector ) <br> .filter( selection ) <br> .filter( element ) <br> .filter( function(index, element) )</h4><p>Iterates over a cheerio object, reducing the set of selector elements to those that match the selector or pass the function&#39;s test. When a Cheerio selection is specified, return only the elements contained in that selection. When an element is specified, return only that element (if it is contained in the original selection). If using the function method, the function is executed in the context of the selected element, so <code>this</code> refers to the current element.</p><p>Selector:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; orange</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Function:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// this === el</span>
  <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; orange</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="not-selector-not-selection-not-element-not-function-index-elem" tabindex="-1"><a class="header-anchor" href="#not-selector-not-selection-not-element-not-function-index-elem" aria-hidden="true">#</a> .not( selector ) <br> .not( selection ) <br> .not( element ) <br> .not( function(index, elem) )</h4><p>Remove elements from the set of matched elements. Given a jQuery object that represents a set of DOM elements, the <code>.not()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don&#39;t match the selector will be included in the result. The <code>.not()</code> method can take a function as its argument in the same way that <code>.filter()</code> does. Elements for which the function returns true are excluded from the filtered set; all other elements are included.</p><p>Selector:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Function:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// this === el</span>
  <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="has-selector-has-element" tabindex="-1"><a class="header-anchor" href="#has-selector-has-element" aria-hidden="true">#</a> .has( selector ) <br> .has( element )</h4><p>Filters the set of matched elements to only those which have the given DOM element as a descendant or which have a descendant that matches the given selector. Equivalent to <code>.filter(&#39;:has(selector)&#39;)</code>.</p><p>Selector:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; fruits</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Element:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; fruits</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="first" tabindex="-1"><a class="header-anchor" href="#first" aria-hidden="true">#</a> .first()</h4><p>Will select the first element of a cheerio object</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; Apple</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="last" tabindex="-1"><a class="header-anchor" href="#last" aria-hidden="true">#</a> .last()</h4><p>Will select the last element of a cheerio object</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; Pear</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eq-i" tabindex="-1"><a class="header-anchor" href="#eq-i" aria-hidden="true">#</a> .eq( i )</h4><p>Reduce the set of matched elements to the one at the specified index. Use <code>.eq(-i)</code> to count backwards from the last selected element.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; Apple</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; Pear</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-i" tabindex="-1"><a class="header-anchor" href="#get-i" aria-hidden="true">#</a> .get( [i] )</h4><p>Retrieve the DOM elements matched by the Cheerio object. If an index is specified, retrieve one of the elements matched by the Cheerio object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tagName<span class="token punctuation">;</span>
<span class="token comment">//=&gt; li</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If no index is specified, retrieve all elements matched by the Cheerio object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> .index()</h4><h4 id="index-selector" tabindex="-1"><a class="header-anchor" href="#index-selector" aria-hidden="true">#</a> .index( selector )</h4><h4 id="index-nodeorselection" tabindex="-1"><a class="header-anchor" href="#index-nodeorselection" aria-hidden="true">#</a> .index( nodeOrSelection )</h4><p>Search for a given element from among the matched elements.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; 2</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; 1</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruit, li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> .end()</h4><p>End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="add-selector-context" tabindex="-1"><a class="header-anchor" href="#add-selector-context" aria-hidden="true">#</a> .add( selector [, context] )</h4><h4 id="add-element" tabindex="-1"><a class="header-anchor" href="#add-element" aria-hidden="true">#</a> .add( element )</h4><h4 id="add-elements" tabindex="-1"><a class="header-anchor" href="#add-elements" aria-hidden="true">#</a> .add( elements )</h4><h4 id="add-html" tabindex="-1"><a class="header-anchor" href="#add-html" aria-hidden="true">#</a> .add( html )</h4><h4 id="add-selection" tabindex="-1"><a class="header-anchor" href="#add-selection" aria-hidden="true">#</a> .add( selection )</h4><p>Add elements to the set of matched elements.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="addback-filter" tabindex="-1"><a class="header-anchor" href="#addback-filter" aria-hidden="true">#</a> .addBack( [filter] )</h4><p>Add the previous set of elements on the stack to the current set, optionally filtered by a selector.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addBack</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">//=&gt; 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="manipulation" tabindex="-1"><a class="header-anchor" href="#manipulation" aria-hidden="true">#</a> Manipulation</h3><p>Methods for modifying the DOM structure.</p><h4 id="append-content-content" tabindex="-1"><a class="header-anchor" href="#append-content-content" aria-hidden="true">#</a> .append( content, [content, ...] )</h4><p>Inserts content as the <em>last</em> child of each of the selected elements.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="appendto-target" tabindex="-1"><a class="header-anchor" href="#appendto-target" aria-hidden="true">#</a> .appendTo( target )</h4><p>Insert every element in the set of matched elements to the end of the target.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prepend-content-content" tabindex="-1"><a class="header-anchor" href="#prepend-content-content" aria-hidden="true">#</a> .prepend( content, [content, ...] )</h4><p>Inserts content as the <em>first</em> child of each of the selected elements.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prependto-target" tabindex="-1"><a class="header-anchor" href="#prependto-target" aria-hidden="true">#</a> .prependTo( target )</h4><p>Insert every element in the set of matched elements to the beginning of the target.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="after-content-content" tabindex="-1"><a class="header-anchor" href="#after-content-content" aria-hidden="true">#</a> .after( content, [content, ...] )</h4><p>Insert content next to each element in the set of matched elements.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insertafter-target" tabindex="-1"><a class="header-anchor" href="#insertafter-target" aria-hidden="true">#</a> .insertAfter( target )</h4><p>Insert every element in the set of matched elements after the target.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="before-content-content" tabindex="-1"><a class="header-anchor" href="#before-content-content" aria-hidden="true">#</a> .before( content, [content, ...] )</h4><p>Insert content previous to each element in the set of matched elements.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insertbefore-target" tabindex="-1"><a class="header-anchor" href="#insertbefore-target" aria-hidden="true">#</a> .insertBefore( target )</h4><p>Insert every element in the set of matched elements before the target.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="replacewith-content" tabindex="-1"><a class="header-anchor" href="#replacewith-content" aria-hidden="true">#</a> .replaceWith( content )</h4><p>Replaces matched elements with <code>content</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> plum <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>plum<span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//     &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//     &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//     &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//   &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> .empty()</h4><p>Empties an element, removing all its children.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;&lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="html-htmlstring" tabindex="-1"><a class="header-anchor" href="#html-htmlstring" aria-hidden="true">#</a> .html( [htmlString] )</h4><p>Gets an html content string from the first selected element. If <code>htmlString</code> is specified, each selected element&#39;s content is replaced by the new content.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; Orange</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li class=&quot;mango&quot;&gt;Mango&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li class=&quot;mango&quot;&gt;Mango&lt;/li&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="text-textstring" tabindex="-1"><a class="header-anchor" href="#text-textstring" aria-hidden="true">#</a> .text( [textString] )</h4><p>Get the combined text contents of each element in the set of matched elements, including their descendants. If <code>textString</code> is specified, each selected element&#39;s content is replaced by the new text content.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; Orange</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  Apple</span>
<span class="token comment">//    Orange</span>
<span class="token comment">//    Pear</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="wrap-content" tabindex="-1"><a class="header-anchor" href="#wrap-content" aria-hidden="true">#</a> .wrap( content )</h4><p>The .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> redFruit <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div class=&quot;red-fruit&quot;&gt;&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>redFruit<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//=&gt; &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//     &lt;div class=&quot;red-fruit&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//     &lt;/div&gt;</span>
<span class="token comment">//     &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//     &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//   &lt;/ul&gt;</span>

<span class="token keyword">const</span> healthy <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div class=&quot;healthy&quot;&gt;&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>healthy<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//=&gt; &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//     &lt;div class=&quot;healthy&quot;&gt;</span>
<span class="token comment">//       &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//     &lt;/div&gt;</span>
<span class="token comment">//     &lt;div class=&quot;healthy&quot;&gt;</span>
<span class="token comment">//       &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//     &lt;/div&gt;</span>
<span class="token comment">//     &lt;div class=&quot;healthy&quot;&gt;</span>
<span class="token comment">//        &lt;li class=&quot;plum&quot;&gt;Plum&lt;/li&gt;</span>
<span class="token comment">//     &lt;/div&gt;</span>
<span class="token comment">//   &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="css-propertname-css-propertynames-css-propertyname-value-css-propertname-function-css-properties" tabindex="-1"><a class="header-anchor" href="#css-propertname-css-propertynames-css-propertyname-value-css-propertname-function-css-properties" aria-hidden="true">#</a> .css( [propertName] ) <br> .css( [ propertyNames] ) <br> .css( [propertyName], [value] ) <br> .css( [propertName], [function] ) <br> .css( [properties] )</h4><p>Get the value of a style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.</p><h3 id="rendering" tabindex="-1"><a class="header-anchor" href="#rendering" aria-hidden="true">#</a> Rendering</h3><p>When you&#39;re ready to render the document, you can use the <code>html</code> utility function:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;ul id=&quot;fruits&quot;&gt;</span>
<span class="token comment">//      &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span>
<span class="token comment">//      &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
<span class="token comment">//    &lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to return the outerHTML you can use <code>$.html(selector)</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;.pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, <code>html</code> will leave some tags open. Sometimes you may instead want to render a valid XML document. For example, you might parse the following XML snippet:</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>const $ = cheerio.load(&#39;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">media:</span>thumbnail</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.foo.com/keyframe.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>75<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50<span class="token punctuation">&quot;</span></span> <span class="token attr-name">time</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12:05:01.123<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>... and later want to render to XML. To do this, you can use the &#39;xml&#39; utility function:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">xml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt;  &lt;media:thumbnail url=&quot;http://www.foo.com/keyframe.jpg&quot; width=&quot;75&quot; height=&quot;50&quot; time=&quot;12:05:01.123&quot;/&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You may also render the text content of a Cheerio object using the <code>text</code> static method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;This is &lt;em&gt;content&lt;/em&gt;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; This is content.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The method may be called on the Cheerio module itself--be sure to pass a collection of nodes!</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;div&gt;This is &lt;em&gt;content&lt;/em&gt;.&lt;/div&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cheerio<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; This is content.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="miscellaneous" tabindex="-1"><a class="header-anchor" href="#miscellaneous" aria-hidden="true">#</a> Miscellaneous</h3><p>DOM element methods that don&#39;t fit anywhere else</p><h4 id="toarray" tabindex="-1"><a class="header-anchor" href="#toarray" aria-hidden="true">#</a> .toArray()</h4><p>Retrieve all the DOM elements contained in the jQuery set as an array.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [ {...}, {...}, {...} ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> .clone()</h4><p>Clone the cheerio object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> moreFruit <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#fruits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="utilities" tabindex="-1"><a class="header-anchor" href="#utilities" aria-hidden="true">#</a> Utilities</h3><h4 id="root" tabindex="-1"><a class="header-anchor" href="#root" aria-hidden="true">#</a> $.root</h4><p>Sometimes you need to work with the top-level root element. To query it, you can use <code>$.root()</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;ul id=&quot;vegetables&quot;&gt;&lt;/ul&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; &lt;ul id=&quot;fruits&quot;&gt;...&lt;/ul&gt;&lt;ul id=&quot;vegetables&quot;&gt;&lt;/ul&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parsehtml-data-context-keepscripts" tabindex="-1"><a class="header-anchor" href="#parsehtml-data-context-keepscripts" aria-hidden="true">#</a> $.parseHTML( data [, context ] [, keepScripts ] )</h4><p>Parses a string into an array of DOM nodes. The <code>context</code> argument has no meaning for Cheerio, but it is maintained for API compatability.</p><h4 id="load-html-options" tabindex="-1"><a class="header-anchor" href="#load-html-options" aria-hidden="true">#</a> $.load( html[, options ] )</h4><p>Create a querying function, bound to a document created from the provided markup. Note that similar to web browser contexts, this operation may introduce <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> elements. See the previous section titled &quot;Loading&quot; for usage information.</p><h3 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> Plugins</h3><p>Once you have loaded a document, you may extend the prototype or the equivalent <code>fn</code> property with custom plugin methods:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;html&gt;&lt;body&gt;Hello, &lt;b&gt;world&lt;/b&gt;!&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">$</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">logHtml</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs &quot;Hello, &lt;b&gt;world&lt;/b&gt;!&quot; to the console</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-dom-node-object" tabindex="-1"><a class="header-anchor" href="#the-dom-node-object" aria-hidden="true">#</a> The &quot;DOM Node&quot; object</h3>`,259),r={href:"https://developer.mozilla.org/en-US/docs/Web/API/Node",target:"_blank",rel:"noopener noreferrer"},d=a("<ul><li><code>tagName</code></li><li><code>parentNode</code></li><li><code>previousSibling</code></li><li><code>nextSibling</code></li><li><code>nodeValue</code></li><li><code>firstChild</code></li><li><code>childNodes</code></li><li><code>lastChild</code></li></ul>",1);function k(m,v){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("Cheerio collections are made up of objects that bear some resemblence to "),s("a",r,[n("browser-based DOM nodes"),l(t)]),n(". You can expect them to define the following properties:")]),d])}const h=e(i,[["render",k],["__file","cheerio.html.vue"]]);export{h as default};
